name: Release Draft

on:
  pull_request:
    branches:
      - production
    types: [closed]

permissions:
  contents: write

jobs:
  start:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    steps:
      - name: Get Current Date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"
      - name: Create Release Name
        id: name
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NAME="prod-${{ steps.date.outputs.date }}"
          COUNT=$(gh release list --repo="$GITHUB_REPOSITORY" --json name --jq "map(select(.name | contains(\"$NAME\"))) | length")
          if [ $COUNT -gt 0 ]; then
            while gh release view "$NAME-$COUNT" --repo="$GITHUB_REPOSITORY" --json name --jq '.name' &>/dev/null; do
              COUNT=$((COUNT + 1))
            done
            echo "name=prod-${{ steps.date.outputs.date }}-$COUNT" >> "$GITHUB_OUTPUT"
          else
            echo "name=prod-${{ steps.date.outputs.date }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Create Draft Release
        id: create-draft-release
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ steps.name.outputs.name }}
          RELEASE_NAME: ${{ steps.name.outputs.name }}
        run: |
          gh release create "$TAG_NAME" --target "production" --repo="$GITHUB_REPOSITORY" --title="$RELEASE_NAME" --generate-notes --draft
      - name: Exclude Releases
        id: exclude-releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXCLUSION_DAY: 30
        run: |
            # Calculate exclusion threshold in ISO8601
            if date -v -1d > /dev/null 2>&1; then
            THRESHOLD=$(date -v -"${EXCLUSION_DAY}"M -u +"%Y-%m-%dT%H:%M:%SZ")
            else
            THRESHOLD=$(date -d "$EXCLUSION_DAY minute ago" -u +"%Y-%m-%dT%H:%M:%SZ")
            fi
            echo "Exclusion threshold: $THRESHOLD"

            # Get old draft releases except the latest one
            RELEASES=$(gh release list --repo="$GITHUB_REPOSITORY" --json isDraft,tagName,createdAt | \
            jq -r '[.[] | select(.isDraft and .createdAt < "'$THRESHOLD'")] | sort_by(.createdAt)[:-1] | .[].tagName')

            if [ -n "$RELEASES" ]; then
            for tag in $RELEASES; do
              gh release delete --yes --repo="$GITHUB_REPOSITORY" "$tag"
              echo "Deleted release: $tag"
            done
            else
            echo "No old draft releases to delete."
            fi
